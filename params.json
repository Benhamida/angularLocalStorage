{"name":"Angular localStorage ","tagline":"The simplest localStorage implementation you will ever use.","body":"# What is it\r\nLocal Storage lets you store key value pair information on the browser of your visitor, it's very similar to a cookie. With this Angular Module you can enjoy all its benefits of localStorage plus some additional features that kick ass. Instead of having to constantly worry about setting the localStorage values when you change some variable in your Angular Application, the module automatically does this. It basically adds two way binding that you have come to expect from your application and the view, but it works by keeping the value stored locally with any angular value you choose. This can create much more robust applications.\r\n\r\n# Features:\r\n\r\n* Two way bind your $scope variable value to a localStorage which will be updated whenever the model is updated, and vice versa.\r\n* You can directly store Objects, Arrays, Floats, Booleans, and Strings. No need to convert your objects to strings and then reverse them.\r\n* Fallback to Angular ``$cookies`` if localStorage is not supported (REMEMBER to add ``angular-cookies.min.js`` script to your project or remove ``'ngCookies'`` from a dependency);\r\n\r\n# How to use\r\n\r\nThis module is also available as bower package, install it with such command:\r\n\r\n```bash\r\nbower install angular-localStorage\r\n```\r\n\r\n1. Your application most likely has a line where you set it as a variable containing your module\r\n``var yourApp = angular.module('yourApp', [...]``\r\n2. Just add this module to your app as a dependency\r\n``var yourApp = angular.module('yourApp', [..., 'localStorage']``\r\n3. Now inside your controllers simply pass the $store like this\r\n``yourApp.controller('yourController', function( $scope, $store){``\r\n4. Using the ``$store`` factory\r\n  ```\r\n  // binding it to a $scope.variable - the params ($scope, varName, defaultValue(optional))\r\n  $store.bind($scope,'viewType','cardView');\r\n  // will constantly be updating $scope.viewType\r\n  // to change the variable both locally in your controller and in localStorage just do\r\n  $scope.viewType = 'ANYTHING';\r\n  // that's it, it will be updated in localStorage\r\n\r\n  // just storing something in localStorage with cookie backup for unsupported browsers\r\n  $store.set('key','value');\r\n  // getting that value\r\n  $store.get('key');\r\n  ```\r\n\r\n# Example\r\n\r\nFor live example please checkout - http://plnkr.co/edit/Y1mrNVRkInCItqvZXtto?p=preview\r\n\r\n# Contributors\r\nThe repository is maintained by agrublev. Special thanks to:\r\n* ThomasWeiser \r\n* Elexy \r\n* voronianski\r\n* DevinClark\r\n\r\n### TODO\r\n* Test coverage\r\n* Real life examples of caching/storing ajax call responses and automatically updating the interface even \"offline\"","google":"UA-677733-17","note":"Don't delete this file! It's used internally to help with page regeneration."}